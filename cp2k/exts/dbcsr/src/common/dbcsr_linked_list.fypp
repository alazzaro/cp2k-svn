#!-------------------------------------------------------------------------------------------------!
#!   CP2K: A general program to perform molecular dynamics simulations                             !
#!   Copyright (C) 2000 - 2018  CP2K developers group                                              !
#!-------------------------------------------------------------------------------------------------!
#:mute
#:def inst(nametype1, type1, type1in, type1out, eq, arrayeq, type1arrayEl, arrayEl, private_routines)
! **************************************************************************************************
!> \brief describes a generic linked list template.
!>      Linked list are supposed to always use pointers to the nodes for
!>      basically everything: a pointer to the node is a list, an element of
!>      the list, an iterator between the elment of the list.
!>      An empty list is represented by an unassociated pointer.
!> \par History
!>      1.2002 created
!>      4.2002 changed most of the methods, by making access to the list
!>             always through pointers (identifying pointer, list and iterators)
!>      6.2004 removed %initialized from list elements
!> \author Fawzi Mohamed
! **************************************************************************************************
  IMPLICIT NONE
  PRIVATE

  LOGICAL, PRIVATE, PARAMETER :: debug_this_module=.TRUE.
  CHARACTER(len=*), PRIVATE, PARAMETER :: moduleN='dbcsr_linked_list'

#:set inst = range(0,len(nametype1))

!API type
#:for nametype in nametype1
  PUBLIC :: dbcsr_sll_${nametype}$_type, dbcsr_sll_${nametype}$_p_type
#:endfor

!API common methods
  PUBLIC :: dbcsr_create, dbcsr_dealloc, dbcsr_next
!API special get
  PUBLIC :: dbcsr_get_first_el, dbcsr_get_rest, dbcsr_get_length, dbcsr_get_element_at, dbcsr_to_array
!API special set
  PUBLIC :: dbcsr_set_element_at
!API structure manipulation
  PUBLIC :: dbcsr_insert, dbcsr_remove_first_el, dbcsr_remove_el, dbcsr_remove_all

  !API underlying routines

#:for nametype in nametype1
  PUBLIC :: dbcsr_sll_${nametype}$_create, dbcsr_sll_${nametype}$_dealloc,&
       dbcsr_sll_${nametype}$_next,&
       dbcsr_sll_${nametype}$_get_length,&
       dbcsr_sll_${nametype}$_get_el_at, dbcsr_sll_${nametype}$_set_el_at,&
       dbcsr_sll_${nametype}$_get_first_el, dbcsr_sll_${nametype}$_get_rest,&
       dbcsr_sll_${nametype}$_insert_el, dbcsr_sll_${nametype}$_insert_el_at,&
       dbcsr_sll_${nametype}$_rm_first_el, dbcsr_sll_${nametype}$_rm_el_at,&
       dbcsr_sll_${nametype}$_rm_all_el, &
       dbcsr_sll_${nametype}$_to_array
#:endfor

! creation of an object (from a pointer)
  INTERFACE dbcsr_create
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_create
#:endfor
  END INTERFACE
! destruction of an object (from a pointer)
  INTERFACE dbcsr_dealloc
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_dealloc
#:endfor
  END INTERFACE
! iterates to the next element
  INTERFACE dbcsr_next
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_next
#:endfor
  END INTERFACE
! returns the first element
  INTERFACE dbcsr_get_first_el
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_get_first_el
#:endfor
  END INTERFACE
! returns the rest of the list
  INTERFACE dbcsr_get_rest
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_get_rest
#:endfor
  END INTERFACE
! returns the length of the list
  INTERFACE dbcsr_get_length
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_get_length
#:endfor
  END INTERFACE
! returns the element at the given position
  INTERFACE dbcsr_get_element_at
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_get_el_at
#:endfor
  END INTERFACE
! sets the element at the given position
  INTERFACE dbcsr_set_element_at
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_set_el_at
#:endfor
  END INTERFACE
! inserts one element call dbcsr_insert(list,element,...)
  INTERFACE dbcsr_insert
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_insert_el
#:endfor
  END INTERFACE
  INTERFACE dbcsr_insert_at
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_insert_el_at
#:endfor
  END INTERFACE
! removes an element
  INTERFACE dbcsr_remove_el
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_rm_first_el, &
          dbcsr_sll_${nametype}$_rm_el_at
#:endfor
  END INTERFACE
! removes the first el
  INTERFACE dbcsr_remove_first_el
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_rm_first_el
#:endfor
  END INTERFACE
! remove all the elments
  INTERFACE dbcsr_remove_all
#:for nametype in nametype1
     MODULE PROCEDURE dbcsr_sll_${nametype}$_rm_all_el
#:endfor
  END INTERFACE
! transorms the list in array
  INTERFACE dbcsr_to_array
#:for nametype in nametype1
     module procedure dbcsr_sll_${nametype}$_to_array
#:endfor
  END INTERFACE

#:for i in inst
! **************************************************************************************************
!> \brief represent a single linked list that stores pointers to the elements
!> \param first_el the element that is stored in this node.
!> \param rest the rest of the list
!>
!> \param empty true if the list pointer is not associated, if it points to
!>             to a not it is always false (as there is at least the
!>             first_el in the list)
!> \param length the number of elements in the list
!> \note
!>      List are alway accessed through pointers, so every node of the
!>      linked list can be seen as a list, its first element
!>      a pointer to the position before itself, in a very natural way:
!>      all the insertions take place before the actual element, and
!>      you still can insert an element at the end.
!>      This way I could identify nodes, lists and pointers between the
!>      elements of the list.
!>      Indexing is 1 based.
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  TYPE dbcsr_sll_${nametype1[i]}$_type
     ${type1[i]}$ :: first_el
     TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: rest
  END TYPE dbcsr_sll_${nametype1[i]}$_type
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief pointer to a linked list (to make arrays of pointers)
!> \param list the pointer to the list
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  TYPE dbcsr_sll_${nametype1[i]}$_p_type
     TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: list
  END TYPE dbcsr_sll_${nametype1[i]}$_p_type
#:endfor

CONTAINS

${private_routines}$
! =========== creation / distruction ========


#:for i in inst
! **************************************************************************************************
!> \brief allocates and initializes a single linked list
!> \param sll the single linked list to initialize
!> \param first_el the first element of this list
!> \param rest the following elements (if not given: empty)
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_create(sll,first_el,rest)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    ${type1in[i]}$, OPTIONAL :: first_el
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER, OPTIONAL :: rest

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$:dbcsr_sll_${nametype1[i]}$_create'

    IF (.NOT.PRESENT(first_el)) THEN
       NULLIFY(sll)
       IF (PRESENT(rest)) sll => rest
    ELSE
       ALLOCATE(sll)
       sll%first_el ${eq[i]}$ first_el
       NULLIFY(sll%rest)
       IF (PRESENT(rest)) sll%rest => rest
    END IF
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_create
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief deallocates the singly linked list starting at sll.
!>      Does not work if loops are present!
!> \param sll the list to be deallocated
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      does not deallocate the elments that are stored in the list
!>      check more?
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_dealloc(sll)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_dealloc'

    CALL dbcsr_sll_${nametype1[i]}$_rm_all_el(sll)
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_dealloc
#:endfor

! * low-level *

#:for i in inst
! **************************************************************************************************
!> \brief deallocates a node of a singly linked list (low level)
!> \param sll the node to be deallocated
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_dealloc_node(sll)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll


    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_dealloc_node'

    DEALLOCATE(sll)
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_dealloc_node
#:endfor

! ============= get/set ============

#:for i in inst
! **************************************************************************************************
!> \brief returns the first element stored in the list
!> \param sll the single linked list to get the element from
!> \return ...
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  FUNCTION dbcsr_sll_${nametype1[i]}$_get_first_el(sll) RESULT(res)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    ${type1[i]}$ :: res

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$:dbcsr_sll_${nametype1[i]}$_get_first'

    res ${eq[i]}$ sll%first_el
  END FUNCTION dbcsr_sll_${nametype1[i]}$_get_first_el
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief returns the rest of the list
!> \param sll the single linked list to get the rest from
!> \param iter how many times the call to rest should be iterated,
!>            defaults to 1; -1 means till end of the list.
!> \return ...
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      split the case iter=1 to make it more optimized?
! **************************************************************************************************
  FUNCTION dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter) RESULT(res)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    INTEGER, OPTIONAL :: iter

    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: res

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$:dbcsr_sll_${nametype1[i]}$_get_first'
    INTEGER :: i

    IF (.NOT.ASSOCIATED(sll)) THEN
       NULLIFY(res)
    ELSE
       IF (PRESENT(iter)) THEN
          res => sll
          DO i=1,iter
             IF (ASSOCIATED(res%rest)) THEN
                res => res%rest
             ELSE
                DBCSR_ABORT("tried to go past end")
             END IF
          END DO
          IF (iter==-1) THEN
             DO
                IF (.NOT.ASSOCIATED(res%rest)) EXIT
                res => res%rest
             END DO
          END IF
       ELSE
          res => sll%rest ! make the common case fast...
       END IF
    END IF
  END FUNCTION dbcsr_sll_${nametype1[i]}$_get_rest
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief returns the length of the list
!> \param sll the list you want to know the length of
!> \return ...
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      slow (O(n))
! **************************************************************************************************
  FUNCTION dbcsr_sll_${nametype1[i]}$_get_length(sll) RESULT(res)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), pointer :: sll
    INTEGER ::res

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_get_length'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: iterator

    res=0
    iterator => sll
    DO
       IF (ASSOCIATED(iterator)) THEN
          res=res+1
          iterator => iterator%rest
       ELSE
          EXIT
       END IF
    END DO
  END FUNCTION dbcsr_sll_${nametype1[i]}$_get_length
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief returns the element at the given index
!> \param sll the list you get the element from
!> \param index the position of the element (stating at 1)
!> \return ...
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      slow (O(index))
! **************************************************************************************************
  FUNCTION dbcsr_sll_${nametype1[i]}$_get_el_at(sll,index) RESULT(res)
    ${type1[i]}$ :: res
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    INTEGER, INTENT(in) :: index

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_get_el_at'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: pos

    IF (index==-1) THEN
       pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=-1)
    ELSE
       pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=index-1)
    END IF
    DBCSR_ASSERT(ASSOCIATED(pos))

    res ${eq[i]}$ pos%first_el
  END FUNCTION dbcsr_sll_${nametype1[i]}$_get_el_at
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief sets the element at the given index
!> \param sll the list you get the element from
!> \param index the position of the element (stating at 1)
!>             -1 means at the end
!> \param value the new element
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      slow (O(index))
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_set_el_at(sll,index,value)
    ${type1in[i]}$ :: value
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    INTEGER, INTENT(in) :: index

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_set_el_at'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: pos

    IF (index==-1) THEN
       pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=-1)
    ELSE
       pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=index-1)
    END IF
    DBCSR_ASSERT(ASSOCIATED(pos))

    pos%first_el ${eq[i]}$ value
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_set_el_at
#:endfor

! * iteration *

#:for i in inst
! **************************************************************************************************
!> \brief returns true if the actual element is valid (i.e. iterator ont at end)
!>      moves the iterator to the next element
!> \param iterator iterator that moves along the list
!> \param el_att the actual element (valid only if the function returns true)
!> \return ...
!> \par History
!>      none
!> \author Fawzi Mohamed
! **************************************************************************************************
  FUNCTION dbcsr_sll_${nametype1[i]}$_next(iterator,el_att) RESULT(res)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: iterator
    ${type1out[i]}$, OPTIONAL :: el_att
    LOGICAL :: res

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$:dbcsr_sll_${nametype1[i]}$_next'

    IF (ASSOCIATED(iterator)) THEN
       res=.TRUE.
       if (present(el_att)) el_att ${eq[i]}$ iterator%first_el
       iterator => iterator%rest
    ELSE
       res=.FALSE.
    END IF
  END FUNCTION dbcsr_sll_${nametype1[i]}$_next
#:endfor

! ============ structure modifications ============

#:for i in inst
! **************************************************************************************************
!> \brief insert an element at the beginning of the list
!> \param sll the single linked list point at the beginning of which
!>           you want to add the element
!> \param el the element to add
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      fast (O(1))
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_insert_el(sll,el)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    ${type1in[i]}$:: el

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$:dbcsr_sll_${nametype1[i]}$_add_el'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: newSlot

    NULLIFY(newSlot)

    CALL dbcsr_sll_${nametype1[i]}$_create(newSlot,first_el=el,&
         rest=sll)
    sll => newSlot
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_insert_el
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief remove the first element of the linked list
!> \param sll the list whose first element has to be removed
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      fast (O(1))
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_first_el(sll)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_rm_first_el'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: node_to_rm
    node_to_rm => sll

    IF (ASSOCIATED(sll)) THEN
       sll => sll%rest
       CALL dbcsr_sll_${nametype1[i]}$_dealloc_node(node_to_rm)
    ELSE
       DBCSR_ABORT("tried to remove first el of an empty list")
    END IF
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_first_el
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief inserts the element at the given index
!> \param sll the list you get the element from
!> \param el the new element
!> \param index the position of the element (stating at 1).
!>             If it is -1, it means at end
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      slow (O(index))
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_insert_el_at(sll,el,index)
    ${type1in[i]}$ :: el
    INTEGER, INTENT(in) :: index
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_insert_el_at'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: pos

    IF (index==1) THEN
       CALL dbcsr_sll_${nametype1[i]}$_insert_el(sll,el)
    ELSE
       IF (index==-1) THEN
          pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=-1)
       ELSE
          pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=index-2)
       END IF
       DBCSR_ASSERT(ASSOCIATED(pos))
       CALL dbcsr_sll_${nametype1[i]}$_insert_el(pos%rest,el)
    END IF
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_insert_el_at
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief removes the element at the given index
!> \param sll the list you get the element from
!> \param index the position of the element (stating at 1)
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      slow (O(index))
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_el_at(sll,index)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
    INTEGER, INTENT(in)::index

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_remove_el_at'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: pos

    IF (index==1) THEN
       CALL dbcsr_sll_${nametype1[i]}$_rm_first_el(sll)
    ELSE
       IF (index==-1) THEN
          pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=-1)
       ELSE
          pos => dbcsr_sll_${nametype1[i]}$_get_rest(sll, iter=index-2)
       END IF
       DBCSR_ASSERT(ASSOCIATED(pos))
       CALL dbcsr_sll_${nametype1[i]}$_rm_first_el(pos%rest)
    END IF
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_el_at
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief removes all the elements from the list
!> \param sll the list that should be removed
!> \par History
!>      none
!> \author Fawzi Mohamed
!> \note
!>      check more?
! **************************************************************************************************
  SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_all_el(sll)
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll

    CHARACTER(len=*), PARAMETER :: routineP='dbcsr_linked_list_${nametype1[i]}$/dbcsr_sll_${nametype1[i]}$_rm_all_el'
    TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: next_node, actual_node

    actual_node => sll
    DO
       IF (.NOT.ASSOCIATED(actual_node)) EXIT
       next_node => actual_node%rest
       CALL dbcsr_sll_${nametype1[i]}$_dealloc_node(actual_node)
       actual_node => next_node
    END DO
    NULLIFY(sll)
  END SUBROUTINE dbcsr_sll_${nametype1[i]}$_rm_all_el
#:endfor

#:for i in inst
! **************************************************************************************************
!> \brief returns a newly allocated array with the same contents as
!>      the linked list
!> \param sll the list to trasform in array
!> \return ...
!> \par History
!>      07.2002 created [fawzi]
!> \author Fawzi Mohamed
! **************************************************************************************************
FUNCTION dbcsr_sll_${nametype1[i]}$_to_array(sll) RESULT(res)
  TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: sll
  ${type1arrayEl[i]}$, DIMENSION(:), POINTER :: res

  CHARACTER(len=*), PARAMETER :: routineN='dbcsr_sll_${nametype1[i]}$_to_array',&
        routineP=moduleN//':'//routineN
  INTEGER :: len,i
  TYPE(dbcsr_sll_${nametype1[i]}$_type), POINTER :: iter

  len=dbcsr_sll_${nametype1[i]}$_get_length(sll)
  ALLOCATE(res(len))
  iter => sll
  DO i=1,len
     res(i)${arrayEl[i]}$ ${arrayeq[i]}$ iter%first_el
     DBCSR_ASSERT(dbcsr_sll_${nametype1[i]}$_next(iter).OR.i==len)
  END DO
END FUNCTION dbcsr_sll_${nametype1[i]}$_to_array
#:endfor
#:enddef
#:endmute
